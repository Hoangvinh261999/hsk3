import React, { useEffect, useState, useMemo } from "react";
import { useParams, useNavigate, Link } from "react-router-dom";

function LessonHSK3Page() {
  const { lessonId } = useParams();
  const navigate = useNavigate();
  const lessonNumber = parseInt(lessonId, 10);

  // d·ªØ li·ªáu + v√≤ng ch∆°i
  const [baseWords, setBaseWords] = useState([]);
  const [words, setWords] = useState([]);
  const [loading, setLoading] = useState(true);
  const [isReview, setIsReview] = useState(false); // ƒëang √¥n t·ª´ sai

  // tr·∫°ng th√°i c√¢u hi·ªán t·∫°i
  const [currentIndex, setCurrentIndex] = useState(0);
  const [userAnswer, setUserAnswer] = useState("");
  const [feedback, setFeedback] = useState(null);

  // th·ªëng k√™
  const [correctCount, setCorrectCount] = useState(0);       // s·ªë l·∫ßn tr·∫£ l·ªùi ƒë√∫ng
  const [wrongAttempts, setWrongAttempts] = useState(0);     // t·ªïng s·ªë l·∫ßn sai
  const [wrongCounts, setWrongCounts] = useState({});        // key -> s·ªë l·∫ßn sai
  const [wrongPool, setWrongPool] = useState([]);            // danh s√°ch t·ª´ c·∫ßn √¥n l·∫°i (unique)
  const [finished, setFinished] = useState(false);

  // t·∫°o key ·ªïn ƒë·ªãnh cho t·ª´ (∆∞u ti√™n id, fallback chinese)
  const getKey = (w) => (w?.id ?? w?.chinese ?? JSON.stringify(w));

  useEffect(() => {
    setLoading(true);
    import(`../data/datatheobaihsk3/bai${lessonNumber}.js`)
      .then((module) => {
        const data = module.default || [];
        setBaseWords(data);
        setWords(data);
        setIsReview(false);

        // reset session
        setCurrentIndex(0);
        setUserAnswer("");
        setFeedback(null);
        setCorrectCount(0);
        setWrongAttempts(0);
        setWrongCounts({});
        setWrongPool([]);
        setFinished(false);
        setLoading(false);
      })
      .catch((err) => {
        console.error("Kh√¥ng t·∫£i ƒë∆∞·ª£c d·ªØ li·ªáu:", err);
        setLoading(false);
      });
  }, [lessonNumber]);

  const remainingInRound = useMemo(
    () => Math.max(words.length - currentIndex, 0),
    [words.length, currentIndex]
  );

  const addToWrongPool = (word) => {
    const key = getKey(word);
    setWrongCounts((prev) => ({ ...prev, [key]: (prev[key] || 0) + 1 }));
    setWrongAttempts((n) => n + 1);
    setWrongPool((prev) => {
      // ƒë·∫£m b·∫£o unique theo key
      const exists = prev.some((w) => getKey(w) === key);
      return exists ? prev : [...prev, word];
    });
  };

  const removeFromWrongPoolIfPresent = (word) => {
    const key = getKey(word);
    setWrongPool((prev) => prev.filter((w) => getKey(w) !== key));
  };

  const checkAnswer = () => {
    if (!userAnswer.trim()) return;
    const current = words[currentIndex];
    const correctAnswer = String(current.chinese || "").trim();
    const user = userAnswer.trim();

    if (user === correctAnswer) {
      setFeedback("‚úÖ ƒê√∫ng r·ªìi!");
      setCorrectCount((c) => c + 1);
      // n·∫øu t·ª´ n√†y t·ª´ng sai, khi ƒë√£ ƒë√∫ng th√¨ b·ªè kh·ªèi danh s√°ch c·∫ßn √¥n
      removeFromWrongPoolIfPresent(current);
    } else {
      setFeedback(`‚ùå Sai! ƒê√∫ng: ${correctAnswer}`);
      addToWrongPool(current);
    }
  };

  const nextQuestion = () => {
    // sang c√¢u k·∫ø trong l∆∞·ª£t hi·ªán t·∫°i
    if (currentIndex + 1 < words.length) {
      setCurrentIndex((i) => i + 1);
      setUserAnswer("");
      setFeedback(null);
      return;
    }

    // h·∫øt l∆∞·ª£t hi·ªán t·∫°i
    if (!isReview) {
      // l∆∞·ª£t ƒë·∫ßu ‚Üí n·∫øu c√≥ t·ª´ sai th√¨ chuy·ªÉn sang √¥n l·∫°i
      if (wrongPool.length > 0) {
        setIsReview(true);
        setWords(wrongPool);        // set b·ªô c√¢u h·ªèi th√†nh c√°c t·ª´ sai
        setCurrentIndex(0);
        setUserAnswer("");
        setFeedback(null);
        return;
      }
      // kh√¥ng c√≥ t·ª´ sai ‚Üí ho√†n th√†nh
      setFinished(true);
      return;
    }

    // ƒëang √¥n l·∫°i: n·∫øu v·∫´n c√≤n t·ª´ sai (wrongPool c√≥ th·ªÉ ƒë√£ b·ªã remove d·∫ßn khi tr·∫£ l·ªùi ƒë√∫ng)
    if (wrongPool.length > 0) {
      // ch·∫°y th√™m m·ªôt v√≤ng √¥n c√°c t·ª´ c√≤n sai
      setWords(wrongPool);
      setCurrentIndex(0);
      setUserAnswer("");
      setFeedback(null);
    } else {
      // ƒë√£ l√†m ƒë√∫ng h·∫øt to√†n b·ªô t·ª´ sai
      setFinished(true);
    }
  };

  const handleKeyPress = (e) => {
    if (e.key === "Enter") {
      if (!feedback) {
        checkAnswer();
      } else {
        nextQuestion();
      }
    }
  };

  const goToLesson = (num) => {
    navigate(`/hsk3/hoctheobai/viettiengtrung/bai/${num}`);
  };

  const startReviewNow = () => {
    if (wrongPool.length === 0) return;
    setIsReview(true);
    setWords(wrongPool);
    setCurrentIndex(0);
    setUserAnswer("");
    setFeedback(null);
  };

  if (loading) {
    return (
      <div className="flex items-center justify-center min-h-screen">
        <p className="text-2xl text-gray-600 animate-pulse">ƒêang t·∫£i b√†i h·ªçc...</p>
      </div>
    );
  }

  if (!words || words.length === 0) {
    return (
      <div className="text-center text-2xl text-red-500">
        Kh√¥ng t√¨m th·∫•y d·ªØ li·ªáu cho b√†i {lessonNumber}
      </div>
    );
  }

  const currentWord = words[currentIndex];

  return (
    <div className="max-w-3xl mx-auto p-6 bg-white shadow-lg rounded-lg text-center">
      <h1 className="text-3xl font-bold text-blue-700 mb-2">
        HSK3 - Game luy·ªán t·∫≠p: B√†i {lessonNumber}
      </h1>

      {/* Thanh tr·∫°ng th√°i / th·ªëng k√™ */}
      <div className="flex flex-wrap items-center justify-center gap-3 mb-4">
        {isReview && (
          <span className="px-3 py-1 rounded-full text-sm font-semibold bg-yellow-100 text-yellow-700 border border-yellow-300">
            üîÅ ƒêang √¥n l·∫°i t·ª´ sai
          </span>
        )}
        <span className="px-3 py-1 rounded-full text-sm bg-green-100 text-green-700 border border-green-300">
          ‚úÖ ƒê√∫ng: {correctCount}
        </span>
        <span className="px-3 py-1 rounded-full text-sm bg-red-100 text-red-700 border border-red-300">
          ‚ùå Sai (l·∫ßn): {wrongAttempts}
        </span>
        <span className="px-3 py-1 rounded-full text-sm bg-purple-100 text-purple-700 border border-purple-300">
          üìö C·∫ßn √¥n l·∫°i: {wrongPool.length} t·ª´
        </span>
        <span className="px-3 py-1 rounded-full text-sm bg-gray-100 text-gray-700 border border-gray-300">
          ‚è≥ C√≤n l·∫°i (l∆∞·ª£t n√†y): {remainingInRound}
        </span>
      </div>

      {finished ? (
        <div className="mt-4">
          <h2 className="text-2xl font-semibold mb-4">
            üéâ Ho√†n th√†nh! B·∫°n ƒë√£ l√†m ƒë√∫ng h·∫øt t·∫•t c·∫£ t·ª´ (k·ªÉ c·∫£ c√°c t·ª´ sai).
          </h2>
          <div className="space-x-2">
            {lessonNumber > 1 && (
              <button
                onClick={() => goToLesson(lessonNumber - 1)}
                className="bg-gray-200 hover:bg-gray-300 text-gray-800 px-5 py-3 rounded-lg text-lg"
              >
                ‚Üê B√†i {lessonNumber - 1}
              </button>
            )}
            <button
              onClick={() => goToLesson(lessonNumber + 1)}
              className="bg-blue-500 hover:bg-blue-600 text-white px-5 py-3 rounded-lg text-lg"
            >
              B√†i {lessonNumber + 1} ‚Üí
            </button>
          </div>
          <div className="mt-4">
            <Link to="/hsk3/hoctheobai" className="text-blue-500 hover:underline text-lg">
              Quay l·∫°i danh s√°ch b√†i
            </Link>
          </div>
        </div>
      ) : (
        <>
          {/* C√¢u h·ªèi */}
          <div className="mb-6">
            <p className="text-2xl mb-4 font-semibold">
              Nghƒ©a: <span className="text-gray-800">{currentWord?.meaning}</span>
            </p>

            <input
              type="text"
              value={userAnswer}
              onChange={(e) => setUserAnswer(e.target.value)}
              onKeyDown={handleKeyPress}
              placeholder="Nh·∫≠p ti·∫øng Trung"
              className="border-2 border-gray-300 rounded-lg px-6 py-3 w-full max-w-md text-center text-2xl"
              autoFocus
            />

            <div className="mt-6">
              {feedback ? (
                <p
                  className={`text-2xl font-bold mb-4 ${
                    feedback.includes("‚úÖ") ? "text-green-600" : "text-red-600"
                  }`}
                >
                  {feedback}
                </p>
              ) : (
                <button
                  onClick={checkAnswer}
                  className="bg-green-500 hover:bg-green-600 text-white px-6 py-3 rounded-lg text-xl"
                >
                  Ki·ªÉm tra
                </button>
              )}
            </div>
          </div>

          {/* V√≠ d·ª• sau khi check */}
          {feedback && (
            <div className="mt-6">
              {currentWord?.example && (
                <div className="bg-gray-50 border border-gray-200 rounded-lg p-4 mb-4 text-left">
                  <p className="text-gray-800">
                    <span className="font-semibold">V√≠ d·ª•:</span> {currentWord.example.sentence}
                  </p>
                  <p className="text-sm text-gray-500">{currentWord.example.pinyin}</p>
                  <p className="text-sm text-gray-500 italic">{currentWord.example.translation}</p>
                </div>
              )}

              <button
                onClick={nextQuestion}
                className="bg-blue-500 hover:bg-blue-600 text-white px-6 py-3 rounded-lg text-xl"
              >
                C√¢u ti·∫øp theo ‚Üí
              </button>
              <p className="text-gray-500 mt-2 text-sm">(·∫§n Enter ƒë·ªÉ sang c√¢u ti·∫øp theo)</p>
            </div>
          )}

          {/* N√∫t v√†o ch·∫ø ƒë·ªô √¥n l·∫°i ngay (tu·ª≥ ch·ªçn) */}
          {!isReview && wrongPool.length > 0 && !feedback && (
            <div className="mt-6">
              <button
                onClick={startReviewNow}
                className="bg-yellow-500 hover:bg-yellow-600 text-white px-5 py-3 rounded-lg text-lg"
              >
                üîÅ √în l·∫°i c√°c t·ª´ ƒë√£ sai ({wrongPool.length})
              </button>
            </div>
          )}

          {/* ƒêi·ªÅu h∆∞·ªõng b√†i */}
          <div className="flex justify-between mt-10">
            {lessonNumber > 1 ? (
              <button
                onClick={() => goToLesson(lessonNumber - 1)}
                className="bg-gray-200 hover:bg-gray-300 text-gray-700 px-4 py-2 rounded-lg"
              >
                ‚Üê B√†i {lessonNumber - 1}
              </button>
            ) : (
              <div />
            )}
            {lessonNumber < 20 ? (
              <button
                onClick={() => goToLesson(lessonNumber + 1)}
                className="bg-blue-500 hover:bg-blue-600 text-white px-4 py-2 rounded-lg"
              >
                B√†i {lessonNumber + 1} ‚Üí
              </button>
            ) : (
              <div />
            )}
          </div>
        </>
      )}
    </div>
  );
}

export default LessonHSK3Page;